<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>git-tutorial</title>
    <url>/2023/01/22/git-tutorial/</url>
    <content><![CDATA[<blockquote>
<p>Git（读音为&#x2F;gɪt&#x2F;）是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。也是Linus Torvalds为了帮助管理Linux内核开发而开发的一个开放源码的版本控制软件。</p>
</blockquote>
<h1 id="git运行机制"><a href="#git运行机制" class="headerlink" title="git运行机制"></a>git运行机制</h1><ul>
<li><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://img-blog.csdnimg.cn/img_convert/47f428dfe978fb49a9aa0b83bc0af00b.png"
                      alt="neovim" style="zoom: 100%;" 
                ></li>
</ul>
<p>上图描述了 git 对象的在不同的生命周期中不同的存储位置，通过不同的 git 命令改变 git 对象的存储生命周期。</p>
<ol>
<li>Workspace：工作区，项目代码存放的地方</li>
<li>Index &#x2F; Stage：暂存区，用于临时存放你的改动，事实上它只是一个文件，保存即将提交到文件列表信息</li>
<li>Repository：仓库区（或本地仓库），就是安全存放数据的位置，这里面有你提交到所有版本的数据。其中HEAD指向最新放入仓库的版本</li>
<li>Remote：远程仓库，托管代码的服务器，可以简单的认为是你项目组中的一台电脑用于远程数据交换</li>
</ol>
<h1 id="文件状态"><a href="#文件状态" class="headerlink" title="文件状态"></a>文件状态</h1><p>版本控制就是对文件的版本控制，要对文件进行修改、提交等操作</p>
<ul>
<li>Untracked: 未跟踪, 此文件在文件夹中, 但并没有加入到git库, 不参与版本控制. 通过git add 状态变为Staged.</li>
<li>Unmodify: 文件已经入库, 未修改, 即版本库中的文件快照内容与文件夹中完全一致. 这种类型的文件有两种去处, 如果它被修改, 而变为Modified. 如果使用git rm移出版本库, 则成为Untracked文件</li>
<li>Modified: 文件已修改, 仅仅是修改, 并没有进行其他的操作. 这个文件也有两个去处, 通过git add可进入暂存staged状态, 使用git checkout 则丢弃修改过, 返回到unmodify状态, 这个git checkout即从库中取出文件, 覆盖当前修改 !</li>
<li>Staged: 暂存状态. 执行git commit则将修改同步到库中, 这时库中的文件和本地文件又变为一致, 文件为Unmodify状态. 执行git reset HEAD filename取消暂存, 文件状态为Modified</li>
</ul>
<h1 id="指令详解"><a href="#指令详解" class="headerlink" title="指令详解"></a>指令详解</h1><h2 id="创建本地git仓库"><a href="#创建本地git仓库" class="headerlink" title="创建本地git仓库"></a>创建本地git仓库</h2><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git init <span class="comment">#新建仓库</span></span><br></pre></td></tr></table></figure></div>

<h2 id="克隆远程仓库"><a href="#克隆远程仓库" class="headerlink" title="克隆远程仓库"></a>克隆远程仓库</h2><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://www.github.git</span><br></pre></td></tr></table></figure></div>

<h2 id="新建分支dev"><a href="#新建分支dev" class="headerlink" title="新建分支dev"></a>新建分支dev</h2><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout -b dev <span class="comment">#创建开发分支dev，并切换到该分支</span></span><br></pre></td></tr></table></figure></div>

<h2 id="保存文件到暂存区stage"><a href="#保存文件到暂存区stage" class="headerlink" title="保存文件到暂存区stage"></a>保存文件到暂存区stage</h2><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git add . <span class="comment">#添加当前目录的所有文件到暂存区</span></span><br><span class="line">git add[<span class="built_in">dir</span>] <span class="comment">#添加指定目录到暂存区，包括子目录</span></span><br><span class="line">git add [file1] <span class="comment">#添加指定文件到暂存区</span></span><br></pre></td></tr></table></figure></div>

<h2 id="提交暂存区文件到本地仓库"><a href="#提交暂存区文件到本地仓库" class="headerlink" title="提交暂存区文件到本地仓库"></a>提交暂存区文件到本地仓库</h2><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git commit [file1] -m [message] <span class="comment">#提交暂存区的指定文件到本地仓库</span></span><br><span class="line">git commit --amend -m [message] <span class="comment">#使用一次新的commit，替代上一次提交</span></span><br></pre></td></tr></table></figure></div>

<h2 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h2><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git status  <span class="comment">#查看当前工作区暂存区变动</span></span><br></pre></td></tr></table></figure></div>

<h2 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h2><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">log</span>  <span class="comment">#查看提交历史</span></span><br></pre></td></tr></table></figure></div>

<h2 id="拉取"><a href="#拉取" class="headerlink" title="拉取"></a>拉取</h2><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git pull  <span class="comment">#拉取远程仓库所有分支更新并合并到本地分支</span></span><br><span class="line">git pull origin master <span class="comment">#将远程master分支合并到当前本地分支</span></span><br><span class="line">git pull origin master:master <span class="comment">#将远程master分支合并到当前本地master分支，冒号后面表示本地分支</span></span><br><span class="line">git fetch --all  <span class="comment">#拉取所有远端的最新代码</span></span><br><span class="line">git fetch origin master <span class="comment">#拉取远程最新master分支代码</span></span><br></pre></td></tr></table></figure></div>

<h2 id="推送"><a href="#推送" class="headerlink" title="推送"></a>推送</h2><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git push origin master <span class="comment">#将本地分支的更新全部推送到远程仓库master分支</span></span><br><span class="line">git push origin -d  删除远程branchname分支</span><br><span class="line">git push --tags 推送所有标签</span><br></pre></td></tr></table></figure></div>

<h2 id="分支处理"><a href="#分支处理" class="headerlink" title="分支处理"></a>分支处理</h2><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git branch  <span class="comment">#查看分支</span></span><br><span class="line">—D <span class="comment">#删除</span></span><br><span class="line">-a <span class="comment">#本地和远程分支</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout master <span class="comment">#切换到分支master</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">git merge master <span class="comment">#合并当前分支到master</span></span><br></pre></td></tr></table></figure></div>

<h2 id="撤销和回退"><a href="#撤销和回退" class="headerlink" title="撤销和回退"></a>撤销和回退</h2><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#用于没添加到暂存区的工作区文件</span></span><br><span class="line">git checkout [file]  <span class="comment">#丢弃某个文件file</span></span><br><span class="line">git checkout .  <span class="comment">#丢弃所有文件</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#作用是修改HEAD的位置，即将HEAD指向的位置改变为之前存在的某个版本</span></span><br><span class="line">git reset HEAD --file <span class="comment">#回退暂存区里的某个文件，回退到当前版本工作区状态</span></span><br><span class="line">git reset –-soft 目标版本号 <span class="comment">#可以把版本库上的提交回退到暂存区,修改记录保留</span></span><br><span class="line">git reset –-mixed 目标版本号 <span class="comment">#可以把版本库上的提交回退到工作区，修改记录保留</span></span><br><span class="line">git reset –-hard  <span class="comment">#可以把版本库上的提交彻底回退，修改的记录全部revert。</span></span><br><span class="line"><span class="comment"># 1.是暂存区文件恢复到源文件</span></span><br><span class="line"><span class="comment"># 2.是本地仓库文件恢复到各个区</span></span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#用于没添加到暂存区的工作区文件</span></span><br><span class="line">git revert 版本号  <span class="comment">#回滚某个版本作为新版本</span></span><br></pre></td></tr></table></figure></div>

<blockquote>
<p>参考文献<br><a class="link"   href="https://blog.csdn.net/weixin_36168780/article/details/112100325" >https://blog.csdn.net/weixin_36168780/article/details/112100325<i class="fa-solid fa-up-right-from-square"></i></a></p>
</blockquote>
]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>neovim tutorial</title>
    <url>/2022/12/23/neovim%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<blockquote>
<p>Neovim在GitHub上自述为<em>Vim-fork focused on extensibility and usability</em>，所以自Neovim诞生以来，它就专注于提高自己的扩展性与易用性，例如内置终端、异步执行这两个比较重要的功能都是Neovim率先支持，而Vim追赶在后的。经过多年在各自赛道上的发展，Neovim与Vim已经产生了不少差异。不过现阶段来看，<strong>Neovim的特性仍然几乎是Vim的超集</strong>，也就是说除了自己独有的功能外，Neovim还支持Vim的绝大部分功能。</p>
</blockquote>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="https://picx.zhimg.com/v2-300e97a93f78e336e63861b9b6df9910_r.jpg?source=172ae18b1b9b6df9910_r.jpg"
                      alt="neovim" style="zoom: 50%;" 
                >

<h1 id="neovim"><a href="#neovim" class="headerlink" title="neovim"></a>neovim</h1><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a class="link"   href="https://github.com/nshen/learn-neovim-lua/tree/bak" >学习 Neovim 全 lua 配置<i class="fa-solid fa-up-right-from-square"></i></a></p>
<h2 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h2><h3 id="安装WSL2"><a href="#安装WSL2" class="headerlink" title="安装WSL2"></a>安装WSL2</h3><h3 id="安装neovim"><a href="#安装neovim" class="headerlink" title="安装neovim"></a>安装neovim</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装稳定版/不稳定版</span></span><br><span class="line">sudo add-apt-repository ppa:neovim-ppa/stable</span><br><span class="line">sudo add-apt-repository ppa:neovim-ppa/unstable</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install neovim</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看有哪些neovim版本</span></span><br><span class="line">sudo apt install apt-show-versions </span><br><span class="line">apt-show-versions -a neovim</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">选择合适的版本安装</span></span><br><span class="line">sudo apt-get install neovim=0.4.4-1~ubuntu20.04.1~ppa1</span><br></pre></td></tr></table></figure></div>
<h2 id="配置方式"><a href="#配置方式" class="headerlink" title="配置方式"></a>配置方式</h2><h3 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h3><p>配置文件路径</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">~/.config/nvim/init.vim</span><br></pre></td></tr></table></figure></div>



<h3 id="lua"><a href="#lua" class="headerlink" title="lua"></a>lua</h3><p>配置文件路径：</p>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">~/.config/nvim/init.lua</span><br></pre></td></tr></table></figure></div>

<p>.vim可以调用.lua配置文件，实现混合配置 ，或者是纯lua编程，接下来所有配置采用Lua编程方式</p>
<h2 id="插件管理"><a href="#插件管理" class="headerlink" title="插件管理"></a>插件管理</h2><ol>
<li>安装 Packer.nvim 插件管理器</li>
</ol>
<p>之前 <code>vim</code> 最常见的插件管理应该是 <a class="link"   href="https://github.com/junegunn/vim-plug" >vim-plug<i class="fa-solid fa-up-right-from-square"></i></a> 我也用过，但 <code>Neovim</code> 0.5 以后一般都会推荐使用 <code>lua</code> 原生的 <a class="link"   href="https://github.com/wbthomason/packer.nvim" >packer.nvim<i class="fa-solid fa-up-right-from-square"></i></a> 做插件管理 。</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">git clone --depth 1 https://github.com/wbthomason/packer.nvim\</span><br><span class="line"> ~/.local/share/nvim/site/pack/packer/start/packer.nvim</span><br></pre></td></tr></table></figure></div>

<ol start="2">
<li>创建插件配置文件lua&#x2F;plugins.lua</li>
</ol>
<div class="highlight-container" data-rel="Lua"><figure class="iseeu highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="built_in">require</span>(<span class="string">&#x27;packer&#x27;</span>).startup(<span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">  <span class="comment">-- Packer can manage itself</span></span><br><span class="line">  use <span class="string">&#x27;wbthomason/packer.nvim&#x27;</span></span><br><span class="line"><span class="keyword">end</span>)</span><br></pre></td></tr></table></figure></div>
<ol start="3">
<li>修改init.lua,加载插件管理配置文件</li>
</ol>
<div class="highlight-container" data-rel="Lua"><figure class="iseeu highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot; Packer插件管理&quot;</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;plugins&#x27;</span>)</span><br></pre></td></tr></table></figure></div>
<ol start="4">
<li>插件安装与更新</li>
</ol>
<div class="highlight-container" data-rel="Lua"><figure class="iseeu highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- Regenerate compiled loader file</span></span><br><span class="line">:PackerCompile</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Remove any disabled or unused plugins</span></span><br><span class="line">:PackerClean</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Clean, then install missing plugins</span></span><br><span class="line">:PackerInstall</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Clean, then update and install plugins</span></span><br><span class="line">:PackerUpdate</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Perform `PackerUpdate` and then `PackerCompile`</span></span><br><span class="line">:PackerSync</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Loads opt plugin immediately</span></span><br><span class="line">:PackerLoad completion-nvim ale</span><br></pre></td></tr></table></figure></div>

<h2 id="主题管理"><a href="#主题管理" class="headerlink" title="主题管理"></a>主题管理</h2>]]></content>
      <tags>
        <tag>neovim</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo + github = blog</title>
    <url>/2023/01/01/hexo-github-blog/</url>
    <content><![CDATA[<blockquote>
<p><code>Hexo + GitHub</code>可以组成免费的个人博客网站，<code>Hexo</code>是高效的静态网站生成框架，它基于<code>Node.js</code>，快速，简单且功能强大，是搭建博客的首选框架。大家可以进入Hexo官网进行详细查看，因为<code>Hexo</code>的创建者是台湾人，对中文的支持很友好，可以选择中文进行查看。通过<code>Hexo</code>，你可以直接使用<code>Markdown</code>语法来撰写博客。写完后只需两三条命令即可将生成的网页上传到<code>github</code>或者<code>coding</code>等代码管理托管平台。</p>
</blockquote>
<h1 id="hexo搭建教程"><a href="#hexo搭建教程" class="headerlink" title="hexo搭建教程"></a>hexo搭建教程</h1><h2 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h2><ul>
<li>Node.js</li>
<li>git</li>
<li>python3</li>
</ul>
<h2 id="hexo安装"><a href="#hexo安装" class="headerlink" title="hexo安装"></a>hexo安装</h2><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装hexo</span></span><br><span class="line">npm install -g hexo-cli </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">初始化项目</span></span><br><span class="line">hexo init &lt;folder&gt;     </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">进入项目文件夹</span></span><br><span class="line">cd &lt;folder&gt; </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">安装必备组件</span></span><br><span class="line">npm install</span><br></pre></td></tr></table></figure></div>

<h2 id="主题安装"><a href="#主题安装" class="headerlink" title="主题安装"></a>主题安装</h2><p><a class="link"   href="https://hexo.io/themes/" >主题参考<i class="fa-solid fa-up-right-from-square"></i></a></p>
<ol>
<li>选择主题下载</li>
</ol>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">git clone -b master https://github.com/Longlongyu/hexo-theme-Cxo themes/Cxo</span><br></pre></td></tr></table></figure></div>

<p>2.更改配置文件<code>_config.yml</code>，注意将themes文件夹下的主题文件夹改为与配置的名字一致</p>
<div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">Cxo</span></span><br></pre></td></tr></table></figure></div>

<p>3.执行命令包括清除、生成、部署</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">hexo clean </span><br><span class="line">hexo g </span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></div>

<h2 id="GitHub配置"><a href="#GitHub配置" class="headerlink" title="GitHub配置"></a>GitHub配置</h2><ol>
<li>创建仓库</li>
</ol>
<p>新建一个名为<code>yourusername.github.io</code>的仓库，如果你的github用户名是test，那么你就新建<code>test.github.io</code>的仓库。将来你的网站访问地址就是 <a class="link"   href="https://test.gtihub.io/" >https://test.gtihub.io<i class="fa-solid fa-up-right-from-square"></i></a></p>
<ol start="2">
<li><p>配置SSH key</p>
<p>1、运行命令： <code>ssh-keygen -t rsa -c &quot;邮件地址&quot;</code> 。邮件地址可以登录你的github - <code>setting</code> - <code>emails</code> 查看<br>2、然后连续3次回车，最终会生成一个文件在用户目录下<br>3、打开用户目录，找到 <code>.ssh\id_rsa.pub</code> 文件，记事本打开并复制里面的内容<br>4、打开你的github主页，进入 <code>个人设置</code> - <code>ssh and gpg keys</code> - <code>new ssh key</code>将刚复制的内容粘贴到key那里，title随便填，保存。<br>5、测试连接 运行命令： <code>ssh -t git@github.com</code> 。<strong>注意这条命令不用修改，直接运行</strong><br>6、全局配置</p>
<div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;selier&quot;         #你的github用户名，非昵称</span><br><span class="line">git config --global user.email  &quot;邮箱@qq.com&quot;  # 填写你的github注册邮箱</span><br></pre></td></tr></table></figure></div></li>
</ol>
<h2 id="博客创建"><a href="#博客创建" class="headerlink" title="博客创建"></a>博客创建</h2><h3 id="配置-config-yml"><a href="#配置-config-yml" class="headerlink" title="配置 __config.yml"></a>配置 <code>__config.yml</code></h3><div class="highlight-container" data-rel="Yaml"><figure class="iseeu highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#配置发布方式</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/windinjuries/windinjuries.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure></div>

<h3 id="创建博客"><a href="#创建博客" class="headerlink" title="创建博客"></a>创建博客</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">hexo clean </span><br><span class="line">hexo new &quot;postName&quot; #新建文章</span><br><span class="line">hexo new page &quot;pageName&quot; #新建页面</span><br><span class="line">hexo generate #生成静态页面至public目录</span><br><span class="line">hexo server #开启预览访问端口（默认端口4000，&#x27;ctrl + c&#x27;关闭server）</span><br><span class="line">hexo deploy #部署到GitHub</span><br></pre></td></tr></table></figure></div>

<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="1-hexo-d出现"><a href="#1-hexo-d出现" class="headerlink" title="1.hexo d出现"></a>1.hexo d出现</h3><h3 id="2-node-环境变量windows与WSL冲突"><a href="#2-node-环境变量windows与WSL冲突" class="headerlink" title="2.node 环境变量windows与WSL冲突"></a>2.node 环境变量windows与WSL冲突</h3><div class="highlight-container" data-rel="Shell"><figure class="iseeu highlight shell"><table><tr><td class="code"><pre><span class="line">1. D:\Anaconda3\</span><br><span class="line">2. D:\Anaconda3\Scripts\</span><br><span class="line">3. D:\Anaconda3\Library\bin\</span><br><span class="line">4. C:\Program Files\nodejs\</span><br><span class="line">//通过删除windows环境变量避免冲突</span><br></pre></td></tr></table></figure></div>

]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>github</tag>
      </tags>
  </entry>
</search>
